css:
三种实现‘浮动’实现方式：
	display：flex;
	display:inline-block;
	float:left;


清除浮动？ 
	.peijian::after{
			clear: both;
			content: '';
			display: block;
		}
		
		
flex布局？
http://www.runoob.com/w3cnote/flex-grammar.html
	Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性
	设为Flex布局以后，子元素的float、clear和vertical-align属性将失效
	采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。
	容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。
	
	容器的属性:
		flex-direction
			决定主轴的方向（即项目的排列方向）,可选值：
				row（默认值）：主轴为水平方向，起点在左端。
				row-reverse：主轴为水平方向，起点在右端。
				column：主轴为垂直方向，起点在上沿。
				column-reverse：主轴为垂直方向，起点在下沿。
		flex-wrap
			默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行,可选值：
				nowrap（默认）：不换行。
				wrap：换行，第一行在上方。
				wrap-reverse：换行，第一行在下方。
		flex-flow
			flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
		justify-content
			justify-content属性定义了项目在主轴上的对齐方式。可选值：
				flex-start（默认值）：左对齐
				flex-end：右对齐
				center： 居中
				space-between：两端对齐，项目之间的间隔都相等。
				space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
		align-items
			align-items属性定义项目在交叉轴上如何对齐。可选值：
				flex-start：交叉轴的起点对齐。
				flex-end：交叉轴的终点对齐。
				center：交叉轴的中点对齐。
				baseline: 项目的第一行文字的基线对齐。
				stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
		align-content
			align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。可选值：
				flex-start：与交叉轴的起点对齐。
				flex-end：与交叉轴的终点对齐。
				center：与交叉轴的中点对齐。
				space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
				space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
				stretch（默认值）：轴线占满整个交叉轴
	项目的属性：
		order
			order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。（可为负值）
		flex-grow
			flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
			如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
		flex-shrink
			flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
			如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小
			负值对该属性无效。
		flex-basis
			flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
			它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。
		flex
			flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
			设置flex: 1（等价于 设置flex-grow: 1;flex-shrink: 1;flex-basis: 0%; ）的项目会占据剩余容器宽度。原因：flex-grow: 1，放大当前项目。width不起作用，max-width起作用。
			https://blog.csdn.net/fengyjch/article/details/79047908
		align-self
			align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
			该属性可能取6个值，除了auto，其他都与align-items属性完全一致。
			
			
	



padding不起作用 margin有用？    
	某些标签设置了默认边框

给容器设置宽度，有时可以防止浮动。


单行行内元素垂直居中？
	1、设置height line-height 相同
	2、设置display: flex
	3、可以设置padding-top,padding-bottom
多行行内元素垂直居中？
	1、可以将元素转为table样式，再设置vertical-align：middle; 
	2、设置	display: flex;
			justify-content: center;
			align-items: center;

/* margin-left: 14px; */不起作用
.rightnav{
    left:50px;
    top:-50px;
    position: relative;
    /* margin-left: 14px; */
    /* display: flex;
    align-items: center;
    flex-direction: column; */
}



css下拉菜单的子菜单偏向于左边怎么解决？
	绝对定位 中设置一下left值


css中能用padding实现的效果尽量不用margin去实现，这是为什么？
	相邻的 margin 存在重叠问题，如果能用 padding 实现，那重叠通常会是未预期的副作用；
	如果存在 box-sizing: border-box; 那么 padding 通常无需设计人员额外计算对整体尺寸的影响，而 margin 需要。

	padding属于盒子内部，配合js事件、或者a标签等情况下，padding能让可点击区域大一些，而margin则不然

	padding能适应各种情况的背景处理



postion?
	 1、absolute(绝对定位)，其位置相对于最近已定位的父元素，如果元素没有已定位的父元素那么它的位置相对于
	 2、static(默认的静态定位)，即没有定位，遵循正常的文档流对象，静态定位的元素不受top、left、right、bottom影响。
	 3、relative(相对定位)，其位置相对其正常时的位置。相对定位元素经常被用来作为绝对定位元素的容器块。
	 4、fixed，元素的位置相对于浏览器窗口，是固定位置。即使窗口是滚动的它也不会移动。
	 5、sticky(粘性定位)，基于用户滚动位置来定位，在未滚动出目标区域时，它的行为就像position:relative;它的表现就像 position:fixed;，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。
	这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。
	

		
css选择器优先级：id--100分 class--10分 标签--1分 （可以这么理解）



block，inline和inlinke-block细节对比
	display:block
		block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。
		block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。
		block元素可以设置margin和padding属性。
	display:inline
		inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。
		inline元素设置width,height属性无效。
		inline元素的margin和padding属性，水平方向的padding-left, padding-right, margin-left, margin-right都产生边距效果；但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom不会产生边距效果。
	display:inline-block
		简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。

防止图片抖动 
	.imgDiv
		overflow: hidden
		height: 0
		padding-bottom: 55%    //padding-bottom  =  图片height/图片width
		.img
		width: 100%
transition？	
	transition: all .5s; 》》》》》》》》》》》》》》》谁要改变给谁设

		
animation：			
	#move {
	    display: inline-block;
		width:50px;
		height:5px;
		background:red;
		/*infinite:无限次循环播放*/
		/*steps(60):类似频率，60次完成一次旋转；linear：动画从头到尾的速度是相同的。ease：默认。动画以低速开始，然后加快，在结束前变慢。*/
		animation: move 6s infinite steps(60);  
		 /*设置旋转的中心点为中间底部*/ 
		transform-origin: center bottom; 
	}
	/*旋转从0度到360度*/ 
	@keyframes move {
		from { 
			transform: rotate(0deg); 
		} 
		to { 
			transform: rotate(360deg); 
		} 
	}
		
tansition和margin的百分比根据什么计算？

	transition是相对于自身,margin相对于参照物	
	
实现三个DIV等分排布在一行?
	1、三个div分别设置  display: inline-block;
	2、三个div的父元素设置 display： flex； flex布局默认方向row
	
calc() 函数	？
	calc()支持CSS3；任何长度值都可以使用calc()函数进行计算；calc()函数支持 "+", "-", "*", "/" 运算; calc()函数使用标准的数学运算优先级规则
	calc() 函数用于动态计算长度值。

     ● 需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；

     ● 任何长度值都可以使用calc()函数进行计算；

     ● calc()函数支持 "+", "-", "*", "/" 运算；

     ● calc()函数使用标准的数学运算优先级规则；
	
	