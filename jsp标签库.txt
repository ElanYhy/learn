标签库相关：
在早期的jsp开发中，是使用java代码来控制逻辑和显示的，但这样会给前端开发人员带来些麻烦并且代码的可读性也会降低。
为了解决上述情况，标签库被创造出来了。标签库的目的在于让开发人员能像使用html标签一样的标签来完成前端的逻辑控制
和内容显示，而把那些繁琐、复杂的java代码隐藏在背后，返还jsp文件的干净整洁。

《标签库》：
	一个标签库一般由两大部分组成：jar文件包和tld文件。
		jar文件包:jar文件包是标签库的功能实现部分，由java来实现。
		tld文件：tld是taglib library description的缩写，用来描述标签库，其内容为标签库中所有标签的定
	义，包括标签名、功能类及各种属性。

《URI和URL的区别》:
	URL是一种具体的URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。
	URI是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，
	所以，是绝对的，而通常说的relative URL，则是针对另一个absolute URL，本质上还是绝对的。

《taglib》：
	taglib用来引用标签库并设置标签库的前缀。

	语法：<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	uri属性：用来指定标签文件或标签库的存放位置。
	prefix属性：用来指定该标签所使用的前缀。
	
	使用自定义uri（如 uri="myjstl"）时，需要在web.xml中配置：
	   <taglib>  
		   <taglib-uri>myjstl</taglib-uri>  
		   <taglib-location>/WEB-INF/tld/c.tld</taglib-location>  
	   </taglib>  
	tld中的标准uri不需要配置

《jstl》
JSTL--JavaServer Pages Standard Tag Library（JSP标准标签函数库）
JSTL用来处理页面展示逻辑，一般搭配EL表达式使用，EL表达式用来取值。

根据JSTL标签所提供的功能，可以将其分为5个类别。

核心标签
格式化标签
SQL 标签
XML 标签
JSTL 函数

核心标签：
	引入：<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	
	1、<c:out>
		用来显示一个表达式的结果，与<%= %>作用相似，它们的区别就是<c:out>标签可以直接通过"."操作符来访问属性。
		<c:out value="&lt要显示的数据对象（使用转义字符）&gt" escapeXml="false" default="输出的默认值"></c:out>
	2、<c:set>
		用于设置变量值和对象属性。
		<c:set
		   var="<string>"  存储信息的变量
		   value="<string>" 要存储的值
		   target="<string>" 要修改的属性所属的对象
		   property="<string>" 要修改的属性
		   scope="<string>"/>  var属性的作用域   jsp 处理变量的作用域先后依次为：page(默认) -> request -> session -> application
		   
		<c:set var="salary" scope="session" value="${2000*2}"/>
	3、<c:if>
		表达式的值为 true 则执行其主体内容
		<c:if test="${salary > 2000}" var="flag" scope="session">
			<p>我的工资大于2000为: <c:out value="${salary}"/><p>
		</c:if>
		<c:if test="${not flag}">
		   <p>我的工资不大于2000为: <c:out value="${salary}"/><p>
		</c:if>
	4、<c:catch>
		主要用来处理产生错误的异常状况，并且将错误信息储存起来。
		<c:catch var ="catchException">
		   <% int x = 5/0;%>
		</c:catch>

		<c:if test = "${catchException != null}">
		   <p>异常为 : ${catchException} <br />
		   发生了异常: ${catchException.message}</p>
		</c:if>
	5、<c:choose> <c:when> <c:otherwise>
		用于在众多选项中做出选择。
		<c:when>	<c:choose>的子标签，用来判断条件是否成立。
		<c:otherwise>	<c:choose>的子标签，接在<c:when>标签后，当<c:when>标签判断为false时被执行。

		<c:set var="salary" scope="session" value="${2000*2}"/>
		<p>你的工资为 : <c:out value="${salary}"/></p>
		<c:choose>
			<c:when test="${salary <= 0}">
			   太惨了。
			</c:when>
			<c:when test="${salary > 1000}">
			   不错的薪水，还能生活。
			</c:when>
			<c:otherwise>
				什么都没有。
			</c:otherwise>
		</c:choose>
	6、<c:redirect>
		用来实现请求的重定向。同时可以配合使用<c:param>标签在url中加入指定的参数。
		<c:redirect url="http://www.baidu.com">
			 <%--在重定向时使用<c:param>标签为URL添加了两个参数：uname=GACL和password=123 --%>
			 <c:param name="uname">GACL</c:param>
			 <c:param name="password">123</c:param>
		 </c:redirect>
	7、<c:forEach>
		遍历集合
		<c:forEach var="fuwa" items="${list}" begin="1" end="3" step="2">
			<c:out value="${fuwa}"/><br/>
		 </c:forEach>
		 
	8、<c:forTokens>
　　	用于浏览字符串，并根据指定的字符将字符串截取
		参数：（1）items指定被迭代的字符串。
			　　（2）delims指定使用的分隔符。
			　　（3）var指定用来存放遍历到的成员。
			　　（4）begin指定遍历的开始位置（int型从取值0开始）。
			　　（5）end指定遍历结束的位置（int型，默认集合中最后一个元素）。
			　　（6）step遍历的步长（大于0的整型）。
			　　（7）varStatus存放遍历到的成员的状态信息。
			
			c:forEach varStatus 属性：
				 current: 当前这次迭代的（集合中的）项
				 index: 当前这次迭代从 0 开始的迭代索引
				 count: 当前这次迭代从 1 开始的迭代计数
				 first: 用来表明当前这轮迭代是否为第一次迭代的标志
				 last: 用来表明当前这轮迭代是否为最后一次迭代的标志
				 begin: 属性值
				 end: 属性值
				 step: 属性值
	<c:forTokens items="1*2*3*4*5*6*7" 
                delims="*" 
                begin="1" 
                end="3" 
                var="n" 
                varStatus="s">
                 <c:out value="${n}" />的四种属性：<br>
                 所在位置，即索引：<c:out value="${s.index}" /><br>
                  总共已迭代的次数：<c:out value="${s.count}" /><br>
                  是否为第一个位置：<c:out value="${s.first}" /><br>
                  是否为最后一个位置：<c:out value="${s.last}" /><br>
    </c:forTokens>

格式化标签：
	JSTL格式化标签用来格式化并输出文本、日期、时间、数字。

	引入：<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
	
	
	
	
SQL标签
	JSTL SQL标签库提供了与关系型数据库（Oracle，MySQL，SQL Server等等）进行交互的标签。

	引入：<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
	
	
	

XML 标签
	JSTL XML标签库提供了创建和操作XML文档的标签。

	引入：<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
	
	
	
JSTL函数
	JSTL包含一系列标准函数，大部分是通用的字符串处理函数。

	引入：<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>